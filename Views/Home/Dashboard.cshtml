@model AstraBugTracker.Models.ViewModels.DashboardViewModel;
@using AstraBugTracker.Models.Enums;
@using AstraBugTracker.Services.Interfaces;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<BTUser> _UserManager;
@inject IBTRolesService _roleService
@{
    ViewData["Title"] = "Dashboard";
    @* Instantiate the btUser *@
    BTUser? user = await _UserManager.GetUserAsync(User);
}


<!-- Styles -->
<style>
    .amDark {
        background-color: #30303d;
        color: #fff;
    }


    #chartdiv {
        width: 100%;
        height: 500px;
    }
</style>


<h1 class="text-center">Dashboard</h1>



<div>
    <div classxfont-weighteighteightgetainer-fluid">
        <!-- Info Pills -->
        <div class="row mt-2">
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="Index" asp-controller="Projects" style="text-decoration:none">
                    <div class="card text-center bg-info">
                        <div class="body">
                            <div class="p-15 text-light">
                                <h3 style="color:white !important">@Model.Projects!.Count()</h3>
                                <span>Active Projects</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="Index" asp-controller="Tickets" style="text-decoration:none">
                    <div class="card text-center bg-secondary ">
                        <div class="body">
                            <div class="p-15 text-light">

                                <h3 style="color:white !important">@Model.Tickets!.Count()</h3>
                                <span>Total Tickets</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="UnassignedTickets" asp-controller="Tickets" style="text-decoration:none">
                    <div class="card text-center bg-warning">
                        <div class="body">
                            <div class="p-15 text-light">
                                <h3 style="color:white !important">@Model.Tickets!.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
                                <span>Unassigned Tickets</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <div class="card text-center bg-dark">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3 style="color:white !important">
                                @(
                                    Model.Projects!.Count()
                                    + Model.Tickets!.Count()
                                    + Model.Members!.Count()
                                    )
                            </h3>
                            <span>Total Data</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row gy-2">
            <div class="col-md-12 col">
                <div class="row col-cols-4 mt-5">


                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Projects by Priority</h5>
                            <div class="col-md-12">
                                <div id="projectPriorityLegend" class="donut-legend" style="font-size:x-small"></div>
                            </div>
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisProjectPriority"></div>
                            </div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Project Tickets By Type</h5>
                            <div class="col-md-12">
                                <div id="ticketCountLegendItem" class="donut-legend" style="font-size:x-small"></div>
                            </div>
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisProjectTicketTypeCountData"></div>
                            </div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">

                        <div class="card-body">
                            <h5>Tickets by Priority</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div id="legend" class="donut-legend" style="font-size:x-small"></div>
                            </div>
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketPriority"></div>
                            </div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">

                        <div class="card-body">
                            <h5>Tickets by Status</h5>
                            <div class="col-md-12">
                                <div id="ticketByStatuslegendItem" class="donut-legend" style="font-size:x-small"></div>
                            </div>
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketByStatus"></div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="row gy-2">
                <div class="cols mt-5 ">
                    <div class="card col m-1 p-2">

                        <div class="card-body text-white" style="height:600px">
                            <h5>Project: Tickets vs Developers</h5>
                            <!-- HTML -->
                            <div class="text-white" id="chartdiv"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="mt-5 ">
            <div class="row">

                @* Tickets Table *@
                <div class="col-9">
                    <div class="">
                        <div class="card m-1 p-2">
                            <div class="card-header">
                                <h2>Tickets</h2>
                            </div>
                            <div class="card-body">
                                <partial name="_TicketTablePartial" model="@Model.Tickets" />
                            </div>
                            <div class="card-footer">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-3 ">
                    <div class="">
                        <div class="card m-1 p-2">
                            <div class="card-header">
                                <h2>Members</h2>
                                <hr />
                            </div>
                            <div class="card-body" style="overflow-y:auto;height:600px;background-color:antiquewhite">

                                @foreach (BTUser member in Model.Members!)
                                {
                                    IEnumerable<string>? role = await _roleService.GetUserRolesAsync(member);
                                    <p class="text-dark">@member.FullName - @role.First()</p>
                                }
                            </div>


                        </div>
                    </div>


                </div>

            </div>
        </div>
    </div>

</div>
@section Scripts {


    @* Morris Donut Chart *@
    <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
    @*Project Priority Chart*@
    <script>

        var morrisProjectPriorityData = [
            {label: "Low",
                value: @Model.Projects!.Where(t=>t.ProjectPriority!.Name == nameof(BTProjectPriorities.Low) && t.Archived == false).Count()},
            {label: "Medium",
                value: @Model.Projects!.Where(t=>t.ProjectPriority!.Name == nameof(BTProjectPriorities.Medium) && t.Archived == false).Count()},
            {label: "High",
                value: @Model.Projects!.Where(t=>t.ProjectPriority!.Name == nameof(BTProjectPriorities.High) && t.Archived == false).Count()},
            {label: "Urgent",
                value: @Model.Projects!.Where(t=>t.ProjectPriority!.Name == nameof(BTProjectPriorities.Urgent) && t.Archived == false).Count()}
            ];


        /*
        Morris: Donut
        */
        if ($('#morrisProjectPriority').get(0)) {
            var projectPriorityChart = Morris.Donut({
                resize: true,
                element: 'morrisProjectPriority',
                data: morrisProjectPriorityData,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            projectPriorityChart.options.data.forEach(function (label, i) {
                var projectPriorityLegendItem = $('<span></span>').text(label['label'] + ":" + label['value']).prepend('<span>&nbsp;</span>');
                projectPriorityLegendItem.find('span')
                    .css('backgroundColor', projectPriorityChart.options.colors[i])
                    .css('width', '15px')
                    .css('display', 'inline-block')
                    .css('margin', '8px');
                $('#projectPriorityLegend').append(projectPriorityLegendItem)
            });
        };
    </script>
    @*Ticket Count Chart*@
    <script>

        var morrisProjectTicketTypeCountData = [
            {label: "Work Task",
            value: @Model.Tickets!.Where(t=>t.TicketType!.Name == nameof(BTTicketTypes.WorkTask)).Count()}, 
            {label: "Defect",
            value: @Model.Tickets!.Where(t=>t.TicketType!.Name == nameof(BTTicketTypes.Defect)).Count()}, 
            {label: "Change",
            value: @Model.Tickets!.Where(t=>t.TicketType!.Name == nameof(BTTicketTypes.ChangeRequest)).Count()},
            {label: "Enhancement",
            value: @Model.Tickets!.Where(t=>t.TicketType!.Name == nameof(BTTicketTypes.Enhancement)).Count()},
            {label: "New Feature",
            value: @Model.Tickets!.Where(t=>t.TicketType!.Name == nameof(BTTicketTypes.NewDevelopment)).Count()},
            {label: "General",
            value: @Model.Tickets!.Where(t=>t.TicketType!.Name == nameof(BTTicketTypes.GeneralTask)).Count()}
        ];


        /*
        Morris: Donut
        */
        if ($('#morrisProjectTicketTypeCountData').get(0)) {
            var ticketCountChart = Morris.Donut({
                resize: true,
                element: 'morrisProjectTicketTypeCountData',
                data: morrisProjectTicketTypeCountData,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b', '#7CB47C', '#a7b3bc']
            });

            ticketCountChart.options.data.forEach(function (label, i) {
                var ticketCountLegendItem = $('<span></span>').text(label['label'] + ":" + label['value']).prepend('<span>&nbsp;</span>');
                ticketCountLegendItem.find('span')
                    .css('backgroundColor', ticketCountChart.options.colors[i])
                    .css('width', '15px')
                    .css('display', 'inline-block')
                    .css('margin', '5px');
                $('#ticketCountLegendItem').append(ticketCountLegendItem)
            });
        };
    </script>
    @*Tickets by Priority*@
    <script>

        var morrisDonutData = [{
            label: "Low",
            value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.Low)).Count()
            }, {
            label: "Medium",
            value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.Medium)).Count()
            }, {
            label: "High",
            value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.High)).Count()
            }, {
            label: "Urgent",
            value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.Urgent)).Count()
            }];


        /*
        Morris: Donut
        */
        if ($('#morrisTicketPriority').get(0)) {
            var ticketPriorityChart = Morris.Donut({
                resize: true,
                element: 'morrisTicketPriority',
                data: morrisDonutData,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            ticketPriorityChart.options.data.forEach(function (label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ":" + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', ticketPriorityChart.options.colors[i])
                    .css('width', '15px')
                    .css('display', 'inline-block')
                    .css('margin', '5px');
                $('#legend').append(legendItem)
            });
        };
    </script>
    @*Tickets by Status*@

    <script>

        var morrisTicketByStatusDataL = [{
            label: "New",
            value: @Model.Tickets!.Where(t=>t.TicketStatus!.Name == nameof(BTTicketStatuses.New)).Count()
                    }, {
            label: "Development",
            value: @Model.Tickets!.Where(t=>t.TicketStatus!.Name == nameof(BTTicketStatuses.Development)).Count()
                    }, {
            label: "Testing",
            value: @Model.Tickets!.Where(t=>t.TicketStatus!.Name == nameof(BTTicketStatuses.Testing)).Count()
                    }, {
            label: "Resolved",
            value: @Model.Tickets!.Where(t=>t.TicketStatus!.Name == nameof(BTTicketStatuses.Resolved)).Count()
                    }];


        /*
        Morris: Donut
        */
        if ($('#morrisTicketByStatus').get(0)) {
            var ticketByStatusChart = Morris.Donut({
                resize: true,
                element: 'morrisTicketByStatus',
                data: morrisTicketByStatusDataL,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            ticketByStatusChart.options.data.forEach(function (label, i) {
                var ticketByStatuslegendItem = $('<span></span>').text(label['label'] + ":" + label['value']).prepend('<span>&nbsp;</span>');
                ticketByStatuslegendItem.find('span')
                    .css('backgroundColor', ticketByStatusChart.options.colors[i])
                    .css('width', '15px')
                    .css('display', 'inline-block')
                    .css('margin', '5px');
                $('#ticketByStatuslegendItem').append(ticketByStatuslegendItem)
            });
        };
    </script>
   


    <!-- *** Begin AM Charts *** -->
    <!-- Resources -->
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>

    <!-- Chart code -->
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/AmCharts",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                am4core.ready(function () {

                    // Themes begin
                    // Themes end

                    // Create chart instance
                    var chart = am4core.create("chartdiv", am4charts.XYChart);


                    // Add data
                    chart.data = result;

                    // Create axes
                    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
                    categoryAxis.dataFields.category = "project";
                    categoryAxis.numberFormatter.numberFormat = "#";
                    categoryAxis.renderer.inversed = true;
                    categoryAxis.renderer.grid.template.location = 0;
                    categoryAxis.renderer.cellStartLocation = 0.1;
                    categoryAxis.renderer.cellEndLocation = 0.9;

                    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
                    valueAxis.renderer.opposite = true;

                    // Create series
                    function createSeries(field, name) {
                        var series = chart.series.push(new am4charts.ColumnSeries());
                        series.dataFields.valueX = field;
                        series.dataFields.categoryY = "project";
                        series.name = name;
                        series.columns.template.tooltipText = "{name}: [bold]{valueX}[/]";
                        series.columns.template.height = am4core.percent(100);
                        series.sequencedInterpolation = true;

                        var valueLabel = series.bullets.push(new am4charts.LabelBullet());
                        valueLabel.label.text = "{valueX}";
                        valueLabel.label.horizontalCenter = "left";
                        valueLabel.label.dx = 10;
                        valueLabel.label.hideOversized = false;
                        valueLabel.label.truncate = false;

                        var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
                        categoryLabel.label.text = "{name}";
                        categoryLabel.label.horizontalCenter = "right";
                        categoryLabel.label.dx = -10;
                        categoryLabel.label.fill = am4core.color("#fff");
                        categoryLabel.label.hideOversized = false;
                        categoryLabel.label.truncate = false;
                    }

                    createSeries("tickets", "Tickets");
                    createSeries("developers", "Devs");

                }); // end am4core.ready()


            },
            failure: function (result) {
                alert(result.d);
            },
            error: function (result) {
                alert(result.d);
            }
        });
    </script>

    <!-- *** End AM Charts *** -->
        }

